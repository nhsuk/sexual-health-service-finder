#!/bin/bash
# Specifying the project name (-p) creates a non-default network for the tests
# to run isolated from the main app
PROJECT_NAME=test-ci
docker-compose -p $PROJECT_NAME -f docker-compose-tests.yml down -v
docker-compose -p $PROJECT_NAME -f docker-compose-tests.yml build $PROJECT_NAME
docker-compose -p $PROJECT_NAME -f docker-compose-tests.yml run $PROJECT_NAME

# Find the latest created container.
CONTAINER_ID=$(docker ps -alf name=$PROJECT_NAME --format '{{.ID}}')
# Copy test-results.xml from image to host
docker cp "$CONTAINER_ID:/code/test-results.xml" .
# Copy coverage dir from the image to host.
docker cp "$CONTAINER_ID:/code/coverage/" .
# Rewrite report to account for it no longer being contained in 'code' dir
sed -i -e 's:/code/:./:' ./coverage/lcov.info

# Check if the token exists as the error message doesn't aid diagnosis and is a
# little cryptic e.g. "Couldn't find a repository matching this job."
if [ -z "$COVERALLS_REPO_TOKEN" ]; then
  echo "No value set for COVERALLS_REPO_TOKEN. No coverage will be uploaded."
  exit 1
fi

# Install coveralls so the coverage can be uploaded
mkdir run-coveralls && cd run-coveralls && npm init -f && npm install coveralls && cd ..
./run-coveralls/node_modules/coveralls/bin/coveralls.js < ./coverage/lcov.info

# Clean up
rm -rf run-coveralls
