name: $(BuildID)

trigger:
  batch: false
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

pr:
  autoCancel: true
  branches:
    include:
    - '*'

variables:
  DOCKER_IMAGE_NAME: 'nhsuk/sexual-health-service-finder'

jobs:
- job: docker
  displayName: Push Docker Images
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - task: Docker@1
    displayName: Login to docker hub
    inputs:
      containerregistrytype: 'Container Registry'
      dockerRegistryEndpoint: 'sexual-health'
      command: login
  - bash: |
      CLEANED_SOURCEBRANCH=`echo $BUILD_SOURCEBRANCH | sed -e's:["/:<>\|!?@*]:-:g'`
      BRANCH=`echo $CLEANED_SOURCEBRANCH | sed -E -n -e's:^refs-heads-(.+)$:\1:p'`
      PRID=`echo $CLEANED_SOURCEBRANCH | sed -E -n -e's:^refs-pull-([0-9]+)-merge$:\1:p'`
      TAG=`echo $CLEANED_SOURCEBRANCH | sed -E -n -e's:^refs-tags-(.+)$:\1:p'`

      if [ -n "$BRANCH" ]; then
        echo "##vso[task.setvariable variable=CUSTOM_BRANCH]$BRANCH"
        PARTIAL_BUILD_NAME="$BRANCH"
      fi

      if [ -n "$PRID" ]; then
        echo "##vso[task.setvariable variable=CUSTOM_PRID]$PRID"
        PARTIAL_BUILD_NAME="PR-$PRID"
      fi

      if [ -n "$TAG" ]; then
        echo "##vso[task.setvariable variable=CUSTOM_TAG]$TAG"
        PARTIAL_BUILD_NAME="$TAG"
      fi

      if [ -n "$PARTIAL_BUILD_NAME" ]; then
        BUILD_NAME="$PARTIAL_BUILD_NAME - $BUILD_BUILDNUMBER"
        echo "##vso[build.updatebuildnumber]$BUILD_NAME"
      fi
    displayName: Set variables for future tasks
  - bash: |
      docker-compose -p test-ci -f docker-compose-tests.yml run test-ci
      docker cp $(docker container inspect test-ci_test-ci_run_1 -f '{{.ID}}'):/code/coverage/lcov.info .
      sed -i -e 's:/code/:./:' lcov.info

      export COVERALLS_SERVICE_NAME='azure-devops'
      export COVERALLS_SERVICE_NUMBER=$BUILD_BUILDNUMBER
      export COVERALLS_SERVICE_JOB_ID=$BUILD_BUILDID
      if [ -n "$CUSTOM_PRID" ]; then
        export CI_PULL_REQUEST=$CUSTOM_PRID
        export BRANCH=${SYSTEM_PULLREQUEST_TARGETBRANCH#refs/heads}
      elif [ -n "$CUSTOM_BRANCH" ]; then
        export BRANCH=$CUSTOM_BRANCH
      elif [ -n "$CUSTOM_TAG" ]; then
        export BRANCH=$CUSTOM_TAG
      else
        echo 'could not determine branch' >&2
        exit 1
      fi

      # The tests run inside the container. This is where the coverage report should be uploaded from and not this context
      (mkdir run-coveralls && cd run-coveralls && npm init -f && npm install coveralls)
      cat lcov.info | ./run-coveralls/node_modules/coveralls/bin/coveralls.js -s | jq ".git.branch = "'"'"$BRANCH"'"'" | .service_number = "'"'"$COVERALLS_SERVICE_NUMBER"'"' > json_post.txt
      RESPONSE=$(curl -S -X POST --form json_file=@json_post.txt https://coveralls.io/api/v1/jobs)
      echo $RESPONSE
    displayName: Run tests
  - bash: |
      DOCKER_TAGS=()

      if [ "$CUSTOM_BRANCH" = "master" ]; then
        DOCKER_TAGS+=("master" "latest")
        RELEASE_STAGE=master
      elif [ -n "$CUSTOM_PRID" ]; then
        DOCKER_TAGS+=("pr-$CUSTOM_PRID")
        RELEASE_STAGE=PR
      elif [ -n "$CUSTOM_TAG" ]; then
        DOCKER_TAGS+=($CUSTOM_TAG)
        echo "##vso[build.addbuildtag]release-candidate"
      else
        echo "Build for '$BUILD_SOURCEBRANCH' will not be pushed to docker hub"
        echo "Only builds of master, tags and PRs are pushed to docker hub."
        exit 0
      fi

      TAGS_ARGS=`for tag in ${DOCKER_TAGS[@]}; do echo "-t $DOCKER_IMAGE_NAME:$tag"; done | paste -sd' ' -`
      echo Running docker build . $TAGS_ARGS
      docker build . $TAGS_ARGS
      echo Pushing all images
      for tag in ${DOCKER_TAGS[@]}; do
        echo Pushing $tag
        docker push $DOCKER_IMAGE_NAME:$tag
      done

      if [ -n "$RELEASE_STAGE" ]; then
        echo "##vso[build.addbuildtag]$RELEASE_STAGE"
      fi
    displayName: 'Push image to docker hub'

- job: rancher
  displayName: Save rancher-config folder
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)/rancher-config'
    inputs:
      sourceFolder: 'rancher-config'
      targetFolder: '$(Build.ArtifactStagingDirectory)/rancher-config'
      cleanTargetFolder: true
      overWrite: true
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
